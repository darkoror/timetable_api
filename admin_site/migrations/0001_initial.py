# Generated by Django 4.0.4 on 2022-06-02 22:44

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcademyBuilding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'academy_buildings',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Auditorium',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10)),
                ('academy_building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auditoriums', to='admin_site.academybuilding')),
            ],
            options={
                'db_table': 'auditoriums',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'departments',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='admin_site.department')),
            ],
            options={
                'db_table': 'groups',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('week_type', models.PositiveSmallIntegerField(choices=[(1, 'Numerator'), (2, 'Denominator')], help_text='indicates what lessons should occur (there are lessons occur once in 2 weeks)')),
            ],
            options={
                'verbose_name': 'university',
                'verbose_name_plural': 'universities',
                'db_table': 'universities',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70)),
                ('surname', models.CharField(max_length=70)),
                ('patronymic', models.CharField(max_length=70)),
                ('universities', models.ManyToManyField(related_name='teachers', to='admin_site.university')),
            ],
            options={
                'db_table': 'teachers',
                'ordering': ('surname',),
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='admin_site.university')),
            ],
            options={
                'db_table': 'subjects',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson_number', models.PositiveSmallIntegerField(help_text='lesson number in schedule (first lesson, etc.)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('type', models.PositiveSmallIntegerField(choices=[(0, 'Lecture'), (1, 'Practical'), (2, 'Lab'), (3, 'Seminar')], help_text='e.g. lecture/lab/seminar/etc. lesson')),
                ('subgroup', models.PositiveSmallIntegerField(choices=[(0, 'Whole group'), (1, 'Subgroup 1'), (2, 'Subgroup 2')], help_text='group could divides on a few parts for some lessons')),
                ('week_day', models.PositiveSmallIntegerField(choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')])),
                ('lesson_url', models.URLField(blank=True, help_text='url to connect to the lesson in google meet/zoom', max_length=500, null=True)),
                ('frequency', models.PositiveSmallIntegerField(choices=[(0, 'Every week'), (1, 'Numerator'), (2, 'Denominator')], default=0, help_text='indicates how often the lesson occurs (every week or once in 2 weeks)')),
                ('additional_info', models.CharField(blank=True, max_length=70, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('auditorium', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='lessons', to='admin_site.auditorium')),
                ('groups', models.ManyToManyField(related_name='lessons', to='admin_site.group')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='lessons', to='admin_site.subject')),
                ('teachers', models.ManyToManyField(related_name='lessons', to='admin_site.teacher')),
            ],
            options={
                'db_table': 'lessons',
                'ordering': ('id',),
            },
        ),
        migrations.AddField(
            model_name='group',
            name='university',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='admin_site.university'),
        ),
        migrations.AddField(
            model_name='department',
            name='university',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='admin_site.university'),
        ),
        migrations.AddField(
            model_name='academybuilding',
            name='university',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='academy_buildings', to='admin_site.university'),
        ),
        migrations.AddConstraint(
            model_name='teacher',
            constraint=models.UniqueConstraint(fields=('name', 'surname', 'patronymic'), name='unique_teacher'),
        ),
        migrations.AddConstraint(
            model_name='subject',
            constraint=models.UniqueConstraint(fields=('name', 'university'), name='unique_subject_in_university'),
        ),
        migrations.AddConstraint(
            model_name='group',
            constraint=models.UniqueConstraint(fields=('name', 'department'), name='unique_group_in_department'),
        ),
        migrations.AddConstraint(
            model_name='department',
            constraint=models.UniqueConstraint(fields=('name', 'university'), name='unique_university_department'),
        ),
        migrations.AddConstraint(
            model_name='auditorium',
            constraint=models.UniqueConstraint(fields=('name', 'academy_building'), name='unique_auditorium_in_academy_building'),
        ),
        migrations.AddConstraint(
            model_name='academybuilding',
            constraint=models.UniqueConstraint(fields=('name', 'university'), name='unique_academy_building_in_university'),
        ),
    ]
