name: Continuous Integration and Delivery

on:
  push:
    branches:
      - master

jobs:

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Log in to GitHub Packages
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ secrets.API_IMAGE }} || true
      - name: Build image
        run: |
          docker build -f Dockerfile --no-cache -t ${{ secrets.API_IMAGE }} .
      - name: Push images
        run: |
          docker push ${{ secrets.API_IMAGE }}


  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      # - name: Add environment variables to .env
      #   run: |
      #     echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
      #     echo DEBUG=${{ secrets.DEBUG }} >> .env
  
      #     echo CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }} >> .env
      #     echo CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} >> .env
      #     echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
  
      #     # Variables to connect to exist db
      #     echo DB_NAME=${{ secrets.DB_NAME }} >> .env
      #     echo DB_USER=${{ secrets.DB_USER }} >> .env
      #     echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
      #     echo DB_HOST=${{ secrets.DB_HOST }} >> .env
      #     echo DB_PORT=${{ secrets.DB_PORT }} >> .env
  
      #     # Variables for postgres container (need to create container)
      #     # Look 'Environment Variables' topic at https://hub.docker.com/_/postgres
      #     echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
      #     echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
      #     echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
  
      #     echo REDIS_URL=${{ secrets.REDIS_URL }} >> .env
      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
      - name: Build and deploy images on VPS
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp -P ${{ secrets.VPS_SSH_PORT }} -o StrictHostKeyChecking=no -r ./.env ./docker-compose.yml root@${{ secrets.VPS_IP_ADDRESS }}:/usr/src/apps/timetable/timetable_api
          ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_IP_ADDRESS }} -p ${{ secrets.VPS_SSH_PORT }} << 'ENDSSH'
            cd /usr/src/apps/timetable/timetable_api
            source .env
            docker login ghcr.io -u ${{ secrets.NAMESPACE }} -p ${{ secrets.PERSONAL_ACCESS_TOKEN }}
            docker pull ${{ secrets.API_IMAGE }}
            docker-compose -f docker-compose.yml up -d
          ENDSSH
